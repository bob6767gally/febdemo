{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "datafactory-az"
		},
		"AzureBlobStorage1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage1'"
		},
		"AzureBlobStorage2_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage2'"
		},
		"AzureDataLakeStorage1_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'AzureDataLakeStorage1'"
		},
		"AzureDataLakeStorage1_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://vggen2.dfs.core.windows.net/"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/CSPipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Conditionalsplitflow",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"cssample": {},
									"sink1": {},
									"sink2": {},
									"sink3": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-02-21T10:42:26Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Conditionalsplitflow')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ExistsPipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "ExistDataflow",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sample": {},
									"emp": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-02-21T10:42:26Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/ExistDataflow')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LookupPipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Lookupflow",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sample": {},
									"emp": {},
									"lookupsink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-02-21T10:42:26Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Lookupflow')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/UnionPipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "uniondataflow",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"unionemp": {},
									"unionem1": {},
									"unionsink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-02-21T10:42:26Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/uniondataflow')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/sample')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "testing pipeline",
				"activities": [
					{
						"name": "Wait1",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 1
						}
					},
					{
						"name": "Wait2",
						"type": "Wait",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 1
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/csemp')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "emp_data.csv",
						"container": "input"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "EMPNO",
						"type": "String"
					},
					{
						"name": "ENAME",
						"type": "String"
					},
					{
						"name": "JOB",
						"type": "String"
					},
					{
						"name": "MGR",
						"type": "String"
					},
					{
						"name": "HIREDATE",
						"type": "String"
					},
					{
						"name": "SAL",
						"type": "String"
					},
					{
						"name": "COMM",
						"type": "String"
					},
					{
						"name": "DEPTNO",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/datagen2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "cs-output"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/datagen2_1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "cs-output"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dlgen2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "cs-output"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/employee')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "Employee Sample Data.csv",
						"container": "input"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "EEID",
						"type": "String"
					},
					{
						"name": "Full Name",
						"type": "String"
					},
					{
						"name": "Job Title",
						"type": "String"
					},
					{
						"name": "Department",
						"type": "String"
					},
					{
						"name": "Business Unit",
						"type": "String"
					},
					{
						"name": "Gender",
						"type": "String"
					},
					{
						"name": "Ethnicity",
						"type": "String"
					},
					{
						"name": "Age",
						"type": "String"
					},
					{
						"name": "Hire Date",
						"type": "String"
					},
					{
						"name": "Annual Salary",
						"type": "String"
					},
					{
						"name": "Bonus %",
						"type": "String"
					},
					{
						"name": "Country",
						"type": "String"
					},
					{
						"name": "City",
						"type": "String"
					},
					{
						"name": "Exit Date",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/exists')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "existsoutput"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/lookup')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "lookupoutput"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/union')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "unionoutput"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage1_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage2')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage2_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureDataLakeStorage1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('AzureDataLakeStorage1_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('AzureDataLakeStorage1_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Conditionalsplitflow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "employee",
								"type": "DatasetReference"
							},
							"name": "cssample"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "dlgen2",
								"type": "DatasetReference"
							},
							"name": "sink1"
						},
						{
							"dataset": {
								"referenceName": "datagen2",
								"type": "DatasetReference"
							},
							"name": "sink2"
						},
						{
							"dataset": {
								"referenceName": "datagen2_1",
								"type": "DatasetReference"
							},
							"name": "sink3"
						}
					],
					"transformations": [
						{
							"name": "HRemployees"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EEID as string,",
						"          {Full Name} as string,",
						"          {Job Title} as string,",
						"          Department as string,",
						"          {Business Unit} as string,",
						"          Gender as string,",
						"          Ethnicity as string,",
						"          Age as string,",
						"          {Hire Date} as string,",
						"          {Annual Salary} as string,",
						"          {Bonus %} as string,",
						"          Country as string,",
						"          City as string,",
						"          {Exit Date} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> cssample",
						"cssample split(equals(Department, 'IT'),",
						"     equals(Department, 'Sales'),",
						"     disjoint: true) ~> HRemployees@(HRemployees, Payrollemployees, Director)",
						"HRemployees@HRemployees sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1",
						"HRemployees@Payrollemployees sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink2",
						"HRemployees@Director sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink3"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/employee')]",
				"[concat(variables('factoryId'), '/datasets/dlgen2')]",
				"[concat(variables('factoryId'), '/datasets/datagen2')]",
				"[concat(variables('factoryId'), '/datasets/datagen2_1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ExistDataflow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "employee",
								"type": "DatasetReference"
							},
							"name": "sample"
						},
						{
							"dataset": {
								"referenceName": "csemp",
								"type": "DatasetReference"
							},
							"name": "emp"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "exists",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "exists1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EEID as string,",
						"          {Full Name} as string,",
						"          {Job Title} as string,",
						"          Department as string,",
						"          {Business Unit} as string,",
						"          Gender as string,",
						"          Ethnicity as string,",
						"          Age as string,",
						"          {Hire Date} as string,",
						"          {Annual Salary} as string,",
						"          {Bonus %} as string,",
						"          Country as string,",
						"          City as string,",
						"          {Exit Date} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> sample",
						"source(output(",
						"          EMPNO as string,",
						"          ENAME as string,",
						"          JOB as string,",
						"          MGR as string,",
						"          HIREDATE as string,",
						"          SAL as string,",
						"          COMM as string,",
						"          DEPTNO as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> emp",
						"sample, emp exists(EEID == EMPNO",
						"     && Department == JOB,",
						"     negate:true,",
						"     broadcast: 'auto')~> exists1",
						"exists1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/employee')]",
				"[concat(variables('factoryId'), '/datasets/csemp')]",
				"[concat(variables('factoryId'), '/datasets/exists')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Lookupflow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "employee",
								"type": "DatasetReference"
							},
							"name": "sample"
						},
						{
							"dataset": {
								"referenceName": "csemp",
								"type": "DatasetReference"
							},
							"name": "emp"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "lookup",
								"type": "DatasetReference"
							},
							"name": "lookupsink"
						}
					],
					"transformations": [
						{
							"name": "lookup"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EEID as string,",
						"          {Full Name} as string,",
						"          {Job Title} as string,",
						"          Department as string,",
						"          {Business Unit} as string,",
						"          Gender as string,",
						"          Ethnicity as string,",
						"          Age as string,",
						"          {Hire Date} as string,",
						"          {Annual Salary} as string,",
						"          {Bonus %} as string,",
						"          Country as string,",
						"          City as string,",
						"          {Exit Date} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> sample",
						"source(output(",
						"          EMPNO as string,",
						"          ENAME as string,",
						"          JOB as string,",
						"          MGR as string,",
						"          HIREDATE as string,",
						"          SAL as string,",
						"          COMM as string,",
						"          DEPTNO as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> emp",
						"sample, emp lookup(Department == JOB",
						"     && {Hire Date} == HIREDATE,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lookup",
						"lookup sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> lookupsink"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/employee')]",
				"[concat(variables('factoryId'), '/datasets/csemp')]",
				"[concat(variables('factoryId'), '/datasets/lookup')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/uniondataflow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "employee",
								"type": "DatasetReference"
							},
							"name": "unionemp"
						},
						{
							"dataset": {
								"referenceName": "csemp",
								"type": "DatasetReference"
							},
							"name": "unionem1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "union",
								"type": "DatasetReference"
							},
							"name": "unionsink"
						}
					],
					"transformations": [
						{
							"name": "union1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EEID as string,",
						"          {Full Name} as string,",
						"          {Job Title} as string,",
						"          Department as string,",
						"          {Business Unit} as string,",
						"          Gender as string,",
						"          Ethnicity as string,",
						"          Age as string,",
						"          {Hire Date} as string,",
						"          {Annual Salary} as string,",
						"          {Bonus %} as string,",
						"          Country as string,",
						"          City as string,",
						"          {Exit Date} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> unionemp",
						"source(output(",
						"          EMPNO as string,",
						"          ENAME as string,",
						"          JOB as string,",
						"          MGR as string,",
						"          HIREDATE as string,",
						"          SAL as string,",
						"          COMM as string,",
						"          DEPTNO as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> unionem1",
						"unionemp, unionem1 union(byName: true)~> union1",
						"union1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> unionsink"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/employee')]",
				"[concat(variables('factoryId'), '/datasets/csemp')]",
				"[concat(variables('factoryId'), '/datasets/union')]"
			]
		}
	]
}